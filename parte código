br/univille/log/
├── Logger.java
├── LoggerConsole.java
├── LoggerFactory.java
├── LoggerFile.java
└── Level.java
package br.univille.log;
public enum Level {
    WARNING, DEBUG, ERROR
}
package br.univille.log;
public interface Logger {
    void log(Level level, String message);
}
package br.univille.log;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
class LoggerConsole implements Logger {
    @Override
    public void log(Level level, String message) {
        String color;
        switch (level) {
            case DEBUG:
                color = "\u001B[32m"; // Verde
                break;
            case WARNING:
                color = "\u001B[33m"; // Amarelo
                break;
            case ERROR:
                color = "\u001B[31m"; // Vermelho
                break;
            default:
                color = "\u001B[0m";  // Reset
        }
        String timeStamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        System.out.println(color + timeStamp + " - " + level + ": " + message + "\u001B[0m");
    }
}
package br.univille.log;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
class LoggerFile implements Logger {
    private static final String FILE_NAME = "log.txt";
    @Override
    public void log(Level level, String message) {
        String timeStamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        try (FileWriter writer = new FileWriter(FILE_NAME, true)) {
            writer.write(timeStamp + " - " + level + ": " + message + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
package br.univille.log;
public class LoggerFactory {
    public static Logger onConsole() {
        return new LoggerConsole();
    }
    public static Logger onFile() {
        return new LoggerFile();
    }
}
